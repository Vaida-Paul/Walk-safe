// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalkSafe.Infrastructure.Context;

#nullable disable

namespace WalkSafe.Infrastructure.Migrations
{
    [DbContext(typeof(WalkSafeContext))]
    [Migration("20241212081833_WalkSafeDatabse")]
    partial class WalkSafeDatabse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WalkSafe.Core.Entities.AbstractClasses.PointOfInterest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointOfInterest");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WalkSafe.Core.Entities.UserAggregate.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("WalkSafe.Core.Entities.GreenSpaceAggregate.GreenSpace", b =>
                {
                    b.HasBaseType("WalkSafe.Core.Entities.AbstractClasses.PointOfInterest");

                    b.Property<double?>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GreenSpace", (string)null);
                });

            modelBuilder.Entity("WalkSafe.Core.Entities.LandmarkAggregate.Landmark", b =>
                {
                    b.HasBaseType("WalkSafe.Core.Entities.AbstractClasses.PointOfInterest");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Landmark", (string)null);
                });

            modelBuilder.Entity("WalkSafe.Core.Entities.GreenSpaceAggregate.GreenSpace", b =>
                {
                    b.HasOne("WalkSafe.Core.Entities.AbstractClasses.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("WalkSafe.Core.Entities.GreenSpaceAggregate.GreenSpace", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalkSafe.Core.Entities.LandmarkAggregate.Landmark", b =>
                {
                    b.HasOne("WalkSafe.Core.Entities.AbstractClasses.PointOfInterest", null)
                        .WithOne()
                        .HasForeignKey("WalkSafe.Core.Entities.LandmarkAggregate.Landmark", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
